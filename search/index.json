[{"content":"38.外观数列 class Solution { public: string countAndSay(int n) { if (n == 1) { return \u0026#34;1\u0026#34;; } string t1 = \u0026#34;1\u0026#34;; string t2 = \u0026#34;\u0026#34;; for (int i = 2; i \u0026lt;= n; i++) { int j = 0; int len = t1.size(); while (j \u0026lt; len) { int cnt = 1; while (j + 1 \u0026lt; len \u0026amp;\u0026amp; t1[j] == t1[j+1]) { j++; cnt++; } t2 += to_string(cnt); t2 += t1[j]; j++; } swap(t1, t2); t2 = \u0026#34;\u0026#34;; } return t1; } }; 39.组合总和 class Solution { public: void dfs(int i, vector\u0026lt;int\u0026gt;\u0026amp; tmp, int target, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; \u0026amp;ans, const vector\u0026lt;int\u0026gt;\u0026amp; candidates) { if (target == 0) { ans.push_back(tmp); return; } if (i \u0026gt;= candidates.size() || target \u0026lt; candidates[i]) { return; } tmp.push_back(candidates[i]); dfs(i, tmp, target-candidates[i], ans, candidates); tmp.pop_back(); dfs(i + 1, tmp, target, ans, candidates); } vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; combinationSum(vector\u0026lt;int\u0026gt;\u0026amp; candidates, int target) { sort(candidates.begin(), candidates.end()); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; ans; vector\u0026lt;int\u0026gt; tmp; dfs(0, tmp, target, ans, candidates); return ans; } }; 40.组合总和-ii class Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; combinationSum2(vector\u0026lt;int\u0026gt;\u0026amp; candidates, int target) { int cnt[51]; memset(cnt, 0, sizeof(cnt)); for (const auto\u0026amp; t: candidates) { cnt[t]++; } sort(candidates.begin(), candidates.end()); int m = unique(candidates.begin(), candidates.end()) - candidates.begin(); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; ans; vector\u0026lt;int\u0026gt; tmp; dfs(0, tmp, target, ans, candidates, m, cnt); return ans; } void dfs(int i, vector\u0026lt;int\u0026gt;\u0026amp; tmp, int target, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; \u0026amp;ans, const vector\u0026lt;int\u0026gt;\u0026amp; candidates, int m, int* cnt) { if (target == 0) { ans.push_back(tmp); return; } if (i \u0026gt;= m || target \u0026lt; candidates[i]) { return; } if (cnt[candidates[i]]) { tmp.push_back(candidates[i]); cnt[candidates[i]]--; dfs(i, tmp, target-candidates[i], ans, candidates, m, cnt); tmp.pop_back(); cnt[candidates[i]]++; } dfs(i + 1, tmp, target, ans, candidates, m, cnt); } }; ","date":"2021-10-11T19:30:44+08:00","permalink":"https://example.com/p/leetcode%E5%88%B7%E9%A2%9820211011/","title":"LeetCode刷题20211011"},{"content":"29 两数相除 要求不使用乘法、除法和 mod 运算符。\nclass Solution { public: int divide(int dividend, int divisor) { if (dividend == 0) return 0; if (divisor == 1) return dividend; if (divisor == -1) { if (dividend \u0026gt; INT_MIN) return -dividend; return INT_MAX; } long long a = dividend; long long b = divisor; int sign = 1; if ((a \u0026gt; 0 \u0026amp;\u0026amp; b \u0026lt; 0) || (a \u0026lt; 0 \u0026amp;\u0026amp; b \u0026gt; 0)) { sign = -1; } a = a \u0026gt; 0 ? a : -a; b = b \u0026gt; 0 ? b : -b; long long ret = calc(a, b); if (sign \u0026gt; 0) return ret \u0026gt; INT_MAX? INT_MAX: ret; return -ret; } int calc(long long a, long long b) { if (a \u0026lt; b) return 0; long long cnt = 1; long long tb = b; while (tb \u0026lt;= a) { tb \u0026lt;\u0026lt;= 1; cnt \u0026lt;\u0026lt;= 1; } tb \u0026gt;\u0026gt;= 1; cnt \u0026gt;\u0026gt;= 1; return cnt + calc(a - tb, b); } }; 31. 下一个排列 从右往左找第一个 a[i] \u0026lt; a[i+1] 的，然后翻转 [i+1, n);\nclass Solution { public: void nextPermutation(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int i = nums.size() - 2; while (i \u0026gt;= 0 \u0026amp;\u0026amp; nums[i] \u0026gt;= nums[i + 1]) { i--; } if (i \u0026gt;= 0) { int j = nums.size() - 1; while (j \u0026gt;= 0 \u0026amp;\u0026amp; nums[i] \u0026gt;= nums[j]) { j--; } swap(nums[i], nums[j]); } reverse(nums.begin() + i + 1, nums.end()); } }; 33.搜索旋转排序数组 这题居然可以用二分！！!\n只要对二分修改一下就行：\n因为整个数组只有一个不单调点，要么在左区间[l, mid]，要么在右区间[mid+1, r]，所以有且只有一个区间是单调的，也就是说区间左端点的值小于右端点的值。对于这个单调的区间，可以判断 target 是否在这个区间，这样每次就可以排除一半的区间。\nclass Solution { public: int search(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { int n = nums.size(); if (!n) return -1; if (n == 1) { return nums[0] == target ? 0 : -1; } int l = 0, r = n - 1; while (l \u0026lt;= r) { int mid = (l + r) / 2; if (nums[mid] == target) return mid; if (nums[0] \u0026lt;= nums[mid]) { if (nums[0] \u0026lt;= target \u0026amp;\u0026amp; target \u0026lt; nums[mid]) { r = mid -1; } else { l = mid + 1; } } else { if (nums[mid] \u0026lt; target \u0026amp;\u0026amp; target \u0026lt;= nums[n-1]) { l = mid + 1; } else { r = mid - 1; } } } return -1; } }; 34.在排序数组中查找元素的第一个和最后一个位置 这题可以用 lower_bound 和 upper_bound 做，若存在 target，lower_bound 返回的是第一个 target 的位置， upper_bound 返回的是最后一个 target 的位置的后一个位置，正好是一个左闭右开的区间：[l, r)。\nclass Solution { public: vector\u0026lt;int\u0026gt; searchRange(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { int n = nums.size(); if (!n) { return {-1, -1}; } int pos = lower_bound(nums.begin(), nums.end(), target) - nums.begin(); if (pos \u0026gt;= n || pos \u0026lt; 0 || nums[pos] != target) { return {-1, -1}; } int pos2 = upper_bound(nums.begin(), nums.end(), target) - nums.begin() - 1; return {pos, pos2}; } }; 36.有效的数独 九宫格的位置可以计算出来，不用这么麻烦的判断。\nclass Solution { public: int calc(int i, int j) { if (i \u0026lt; 3) { if (j \u0026lt; 3) return 0; if (j \u0026lt; 6) return 1; if (j \u0026lt; 9) return 2; } if (i \u0026lt; 6) { if (j \u0026lt; 3) return 3; if (j \u0026lt; 6) return 4; if (j \u0026lt; 9) return 5; } if (j \u0026lt; 3) return 6; if (j \u0026lt; 6) return 7; return 8; } bool isValidSudoku(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board) { bool area[10][10], row[10][10], col[10][10]; memset(area, 0, sizeof(area)); memset(row, 0, sizeof(row)); memset(col, 0, sizeof(col)); for (int i = 0; i \u0026lt; 9; i++) { for (int j = 0; j \u0026lt; 9; j++) { if (board[i][j] \u0026lt; \u0026#39;0\u0026#39; || board[i][j] \u0026gt; \u0026#39;9\u0026#39;) continue; int tmp = board[i][j] - \u0026#39;0\u0026#39;; int a = calc(i, j); if (area[a][tmp]) return false; if (row[i][tmp]) return false; if (col[j][tmp]) return false; area[a][tmp] = row[i][tmp] = col[j][tmp] = true; } } } }; ","date":"2021-10-10T22:54:10+08:00","permalink":"https://example.com/p/leetcode%E5%88%B7%E9%A2%982021-10-10/","title":"LeetCode刷题2021 10 10"},{"content":"   题目 题目难度 提交次数     #14 最长公共前缀 简单 1 次   #13 罗马数字转整数 简单 3 次   #12 整数转罗马数字 中等 2 次   #11 盛最多水的容器 中等 1 次   #9 回文数 简单 1 次   #8 字符串转换整数 (atoi) 中等 7 次   #7 整数反转 简单 5 次   #6 Z 字形变换 中等 3 次    6. Z 字形变换 方法一：迭代，将每个字符放到对应行，然后输出。\n方法二：找每一行的字符对应的索引\n7. 整数反转 ret * 10 + digit \u0026lt;= INT_MAX\n$$ ret \u0026lt;= \\lfloor \\frac{intmax-digit}{10} \\rfloor\n$$\nret * 10 + dight \u0026lt;= INT_MAX / 10 * 10 + INT_MAX % 10\n(ret - INT_MAX / 10) * 10 \u0026lt;= 7 - digit\n若 ret \u0026gt; INT_MAX / 10, 不等式不成立\n若 ret == INT_MAX / 10，在 digit \u0026lt;= 7 时成立，因为 int 首位最大是2, 所以成立\n若 ret \u0026lt; INT_MAX / 10, 不等式成立\n所以比较 ret 和 INT_MAX / 10 可防止溢出。\n8. 字符串转换整数 (atoi) 自动机，但我是直接模拟的。\n9. 回文数 class Solution { public: bool isPalindrome(int x) { if (x \u0026lt; 0 || (x % 10 == 0 \u0026amp;\u0026amp; x != 0)) { return false; } int revertedNumber = 0; while (x \u0026gt; revertedNumber) { // 这一行的判断方法很好！  revertedNumber = revertedNumber * 10 + x % 10; x /= 10; } return x == revertedNumber || x == revertedNumber / 10; } }; 11. 盛最多水的容器 双指针法，减小了搜索空间。每次排除不可能是最优解的。\nhttps://leetcode-cn.com/problems/container-with-most-water/solution/on-shuang-zhi-zhen-jie-fa-li-jie-zheng-que-xing-tu/\nclass Solution { public: int maxArea(vector\u0026lt;int\u0026gt;\u0026amp; height) { int l = 0, r = height.size() - 1; int ans = 0; while (l \u0026lt; r) { int area = min(height[l], height[r]) * (r - l); ans = max(ans, area); if (height[l] \u0026lt;= height[r]) l++; else r--; } return ans; } }; ","date":"2021-10-08T23:21:36+08:00","permalink":"https://example.com/p/leetcode%E5%88%B7%E9%A2%982021-10-8/","title":"LeetCode刷题2021 10 8"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用  思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n 图片  Photo by Florian Klauer on Unsplash   Photo by Luca Bravo on Unsplash \n Photo by Helena Hertz on Unsplash   Photo by Hudai Gayiran on Unsplash \n![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://example.com/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://example.com/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://example.com/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }}  To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files  Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://example.com/p/math-typesetting/","title":"Math Typesetting"}]